#+TITLE: Structure and Interpretation of Computer Programs
- () is composition
- substitution model
  - kinds of expressions
    - numbers
    - symbols
    - combinatios
    - lambda expressions
    - definitions
    - conditionals
  - only need to understand combinations:
    - eval operator to get procedure
    - eval operands to get arguments
    - apply procedure to the arguments
      - copy the body of procedure
        - substituting the arguments supplied for the formal
          parameters of the procedure
        - eval resulting new body
  - e.g: (SOS 3 4)
    - (+ (SQ 3) (SQ 4))
    - (+ (* 3 3) (* 4 4) )
    - (+ 9 (* 4 4))
    - (+ 9 16)
    - 25
  - normal order evaluation
  - knowing the name of the spirit gives you power over it
  - (IF <predicate> <consequent> <alternative>)
  - e.g.: Peano arithmetic
    - (DEFINE (+ X Y) (IF (= X 0) Y (+ (-1+ X) (1+ Y))) )
      - (+ 3 4)
        - (+ 2 5)
        - (+ 1 6)
        - (+ 0 7)
        - 7
      - iteration: O(x) in time, O(1) in space
        - variables contain enough info to resume computation
    - (DEFINE (+ X Y) (IF (= X 0) Y (1+ (+ (-1+ X) Y))) )
      - (+ 3 4)
        - (1+ (+ 2 4))
        - (1+ (1+ (+ 1 4)))
        - (1+ (1+ (1+ (+ 0 4))))
        - (1+ (1+ (1+ 4)))
        - (1+ (1+ 5))
        - (1+ 6)
        - 7
      - linear recursion: O(X) in time, O(X) space
        - stack contains part of the state of the system, variables
          not enough to resume computation
    - Fibonacci
      - (DEFINE (FIB N) (IF (< N 2) (+ (FIB (- N 1)) (FIB (- N 2)))))
        - e.g. (FIB 4)
          - (+ (FIB 3) (FIB 2))
          - (+ (+ (FIB 2) (FIB 1)) (+ (FIB 1) (FIB 0)) )
          - (+ (+ (FIB 1) 1) (+ 1 0))
          - (+ (+ 1 1) 1)
          - (+ 2 1)
          - 3
        - runtime O(FIB(X)) ~ O(2^X) in time, O(2^N) space
    - Towers of Hanoi
 #+BEGIN_SRC scheme
  (define (dum-int a b)
  (if (> a b)
  0
  (+ a (sum-int (1+ a) b))))

  (sum-int 4 9)
 #+END_SRC

 #+RESULTS:
 : An error occurred.

#+BEGIN_SRC scheme
  (define (sum term a next b)
    (if (> a b)
        0
        (+ (term a)
           (sum term
                (next a)
                next
                b))))

  ; sum of integers
  (define (sum-int a b)
    (define (identity a) a)
    (sum identity a 1+ b))

  ; sum of squares
  (define (sum-sq a b)
    (sum square a 1+ b))

  ; Euler's sum of \pi/8

  (define (pi-sum a b)
    (sum (lambda (i) (/ 1 (* i (+ i 2))))
         a
         (lambda (i) (+ i 4))
         b))
#+END_SRC

Example: Hero's algorithm for $\sqrt(x)$. We're looking for a fixed
point of $f: y\to \frac{y+\frac{y}{x}}{2}$
#+BEGIN_SRC scheme
  (define (sqrt x)
    (fixed-pt
     (lambda (y) (average (/ x y) y))
     1))

  (define (fixed-pt f start)
    (define toleance 0.00001)
    (define (close-enough? u v)
      (< (abs (- u v)) toleance))
    (define (iter old new)
      (if (close-enough? old new)
          new
          (iter new (f new))))
    (iter start (f start)))

  ; the function we chose is average-damping:
  (define (sqrt x)
    (fixed-pt
     (average-damp (lambda(y) (/ x y)))
     1))

  (define average-damp
    (lambda (f)
      (lambda (x) (average (f x) x))))
#+END_SRC

Can also consider as result of Newton's method to find $y:
f(y)=0$. Start with $y_0$, then iterate: $y_{n+1} = y_n -
\frac{f(y_n)}{f'|_{y_n}}$
#+BEGIN_SRC scheme
  (define (sqrt x)
    (newton (lambda(y) (- x (square y)))
            1))

  (define (newton f guess)
    (define df (deriv f))
    (fixed-pt (lambda (x) (- x (/ (f x) (df x))))
              guess))

  (define deriv
    (lambda (f)
      (lambda (x)
        (/ (- (f (+ x dx))
              (f x))
           dx))))

#+END_SRC
